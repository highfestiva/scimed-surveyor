#!/usr/bin/env python3
'''A journal to country code mapping is hard, complex, sometimes ambiguous and not well suited for runtime-lookup.
   Therefore a lookup table is created in advance by this script.'''

from bs4 import BeautifulSoup
from collections import defaultdict
import glob
from iso3166 import countries_by_name
import journal_util
from pprint import pformat
import re
import requests


host = 'https://www.ncbi.nlm.nih.gov'
html_titles_and_values = re.compile('^(dt|dd)$')
clean_country = re.compile(r'[,\(\)]')
country_cleanup = {
    'united states': 'united states of america',
    'korea south': 'korea, republic of',
    'england': 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND',
    'scotland': 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND',
    'wales': 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND',
    'russia federation': 'RUSSIAN FEDERATION',
    'iran': 'IRAN, ISLAMIC REPUBLIC OF'}
journal2country_code = {}
doi2journals = {}
doi2cc = {}


def country2code(country):
    country = clean_country.sub('', country.partition(':')[0].strip(), count=100).lower()
    country = country.replace(' republic', '')
    country = country_cleanup.get(country, country)
    # print(country)
    cc = countries_by_name.get(country.upper())
    if cc is None:
        print('country %s not found ~ '%country, end='')
    return cc.alpha3


# print(country2code('russia (federation)'))


def write_journal_countrycode():
    with open('data/journal_countrycode.py', 'wt') as w:
        print('# Generated by gen_journal_countrycode.py.\n', file=w)
        print('journal2country_code = \\\n%s\n\n\n' % pformat(journal2country_code), file=w)
        print('doi2cc = \\\n%s' % pformat(doi2cc), file=w)
        print('journal lookup file writtern')


def get_journal_key_values(url):
    '''Load info on journal via NCBI/NLM.'''
    r = requests.get(url)
    dom = BeautifulSoup(r.text, 'html.parser')
    kvv = defaultdict(list)
    k = None
    for tag in dom.find_all(html_titles_and_values):
        if tag.name == 'dt':
            k = tag.text.strip().lower()
        else:
            kvv[k].append(tag.text.strip().lower())
    return kvv, dom


def find_countries(j2cc):
    lst = [(k,v) for k,v in sorted(j2cc.items()) if not v]
    print('looking up %s journals...' % len(lst))
    fixed = 0
    for j,cc in lst:
        print(j, '~', end=' ')
        url = host+'/nlmcatalog/?term=%%22%s%%22%%5BTitle+Abbreviation%%5D' % j.replace(' ','+')
        kvv,dom = get_journal_key_values(url)
        if not any([k for k in kvv if 'title' in k]):
            print('bad title ~', end=' ')
            url = host+'/nlmcatalog/?term=%%22%s%%22' % j.replace(' ','+')
            kvv,_ = get_journal_key_values(url)
        if not any([k for k in kvv if 'title' in k]):
            print('totally broken journal reference ~', end=' ')
            urls = []
            for p in dom.find_all('p', {'class':'title'}):
                urls += [host+a['href'] for a in p.find_all('a')]
            if urls:
                url = urls[0]
                kvv,_ = get_journal_key_values(url)
        allow_usa = True # balance republishing in USA
        country = ''
        for k,vv in kvv.items():
            if 'title' in k: # allow USA = title in ASCII
                for v in vv:
                    allow_usa &= (v == v.encode('ascii', errors='ignore').decode())
            if 'language' in k: # allow USA = english only
                for v in vv:
                    allow_usa &= (v == 'english')
            if 'country of publication' in k: # allow USA = country of publication is USA
                for v in vv:
                    if not country:
                        country = v
                    if v != 'united states':
                        country = v
                    allow_usa &= (v == 'united states')
        if country == 'united states' and not allow_usa:
            print('indeterminate country ~', url)
            continue
        try:
            cc = country2code(country)
        except:
            print('unable to resolve ~ %s' % country)
            continue
        print(cc)
        j2cc[j] = cc
        fixed += 1
        if fixed >= 100:
            write_journal_countrycode()
            fixed = 0


journals = set()
doi2journals = defaultdict(set)
i = 0
for fname in glob.glob('data/*.json'):
    if 'twitter' in fname:
        continue
    for line in open(fname):
        if '{"_id"' in line[:10]:
            journal_text = line.partition('journal": "')[2].partition('", "')[0]
            jour,doi_pattern = journal_util.extract(journal_text)
            if jour:
                journals.add(jour)
                doi2journals[doi_pattern].add(jour)
            i += 1
            if i%1161 == 0:
                print('\r'+str(i), end='')

journal2country_code = {journal: '' for journal in journals}
print('\r%s unique journals found' % len(journal2country_code))

try:
    import data.journal_countrycode
    journal2country_code.update(data.journal_countrycode.journal2country_code)
    print('%s unique journals when updated with previously stored' % len(journal2country_code))
except:
    print('WARNING: no previous journal->country code translation table found!')

doi2cc = {doi:set([journal2country_code[j] for j in journals]) for doi,journals in doi2journals.items()}
doi2cc = {doi:list(ccs)[0] for doi,ccs in doi2cc.items() if len(ccs)==1}

find_countries(journal2country_code)

write_journal_countrycode()
